{
  "CustomStatelessWidget": {
    "prefix": "sw",
    "body": [
      "import 'package:sugar_talk/abstracts/index.dart';",
      "",
      "class ${1:name} extends CustomStatelessWidget {",
      "  const ${1:name}({super.key});",
      "",
      "  @override",
      "  Widget buildView(BuildContext context, WidgetRef ref) {",
      "    return Scaffold(appBar: null, body: Container($0), bottomNavigationBar: null);",
      "  }",
      "}"
    ],
    "description": "CustomStatelessWidget 无状态组件（Stateless）模板"
  },
  "CustomStatefulWidget": {
    "prefix": "sfw",
    "body": [
      "import 'package:sugar_talk/abstracts/index.dart';",
      "",
      "/// 入口层",
      "class ${1:name} extends CustomStatefulWidget {",
      "  const ${1:name}({super.key});",
      "",
      "  @override",
      "  CustomState<${1:name}> createState() => _${1:name}State();",
      "}",
      "",
      "/// 逻辑层",
      "class _${1:name}State extends CustomState<${1:name}> {",
      "  @override",
      "  Widget build(BuildContext context) => _${1:name}View(this);",
      "}",
      "",
      "/// UI层",
      "class _${1:name}View extends CustomStatefulView<${1:name}, _${1:name}State> {",
      "  const _${1:name}View(super.state);",
      "",
      "  @override",
      "  Widget buildView(BuildContext context, WidgetRef ref) {",
      "    return Scaffold(appBar: null, body: Container($0), bottomNavigationBar: null);",
      "  }",
      "}"
    ],
    "description": "CustomStatefulWidget 有状态组件（Stateful）模板"
  },
  "Repository": {
    "prefix": "rep",
    "body": [
      "import 'package:sugar_talk/views/data/api/index.dart';",
      "",
      "import '../models/index.dart';",
      "",
      "class ${1:name}Repository {",
      "  final ${1:name}Api _api;",
      "  ${1:name}Repository(this._api);",
      "",
      "  /// 获取用户列表",
      "  Future<BaseResponse<List<${1:name}Entity>>?> get${1:name}s() async {",
      "    // 构建请求 DTO",
      "    final request = Get${1:name}sRequestDto();",
      "",
      "    // 调用 API，返回 ${1:name}Dto",
      "    final ${2:value}Dto = await _api.get${1:name}List(request);",
      "",
      "    // Dto 转成 Entity",
      "    final data = ${2:value}Dto?.data ?? [];",
      "    final dtoToEntity = data.map((${2:value}) => ${2:value}.toEntity()).toList();",
      "",
      "    // 转换成最终输出数据",
      "    final convertData = ${2:value}Dto?.toEntity<List<${1:name}Entity>>(dtoToEntity);",
      "    return convertData;",
      "  }",
      "}",
    ],
    "description": "生成 application/notifiers 里面的文件"
  },
  "Api": {
    "prefix": "api",
    "body": [
      "import 'package:dio/dio.dart';",
      "import 'package:sugar_talk/core/constants/index.dart';",
      "",
      "import '../models/index.dart';",
      "",
      "class ${1:name}Api {",
      "  final Dio _dio;",
      "  ${1:name}Api(this._dio);",
      "",
      "  /// 登录接口",
      "  Future<BaseResponse<${1:name}ResponseDto>?> get${1:name}(${1:name}RequestDto request) async {",
      "    const url = ApiEndpoints.xxx;",
      "",
      "    try {",
      "      final response = await _dio.post<BaseResponse<${1:name}ResponseDto>>(",
      "        url,",
      "        data: request.toJson(),",
      "      );",
      "",
      "      // 假设接口返回 JSON",
      "      // final data = response.data as Map<String, dynamic>;",
      "      // return ${1:name}ResponseDto.fromJson(data);",
      "",
      "      return response.data;",
      "    } on DioException catch (e) {",
      "      // 可以在这里抛出或映射异常",
      "      throw e;",
      "    }",
      "  }",
      "}",
    ],
    "description": "生成 data/api 里面的文件"
  },
  "Provider": {
    "prefix": "prd",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "import 'package:sugar_talk/core/providers/index.dart';",
      "import 'package:sugar_talk/views/data/api/index.dart';",
      "import 'package:sugar_talk/views/data/index.dart';",
      "",
      "/// 提供 ${1:name}Api 实例",
      "final ${2:value}ApiProvider = Provider<${1:name}Api>((ref) {",
      "  final dio = ref.read(dioProvider);",
      "  return ${1:name}Api(dio);",
      "});",
      "",
      "/// 提供 ${1:name}Repository 实例",
      "final ${2:value}RepositoryProvider = Provider<${1:name}Repository>((ref) {",
      "  final api = ref.read(${2:value}ApiProvider);",
      "  return ${1:name}Repository(api);",
      "});",
      "",
      "",
    ],
    "description": "生成 application/providers 里面的文件"
  },
  "Notifier": {
    "prefix": "ntf",
    "body": [
      "import 'package:riverpod_annotation/riverpod_annotation.dart';",
      "import 'package:sugar_talk/views/data/index.dart';",
      "",
      "import '../providers/index.dart';",
      "",
      "part '${2:value}_notifier.g.dart';",
      "",
      "/// Notifier 管理 ${1:name}State",
      "@Riverpod(keepAlive: true)",
      "class Async${1:name}Notifier extends _\\$Async${1:name}Notifier {",
      "  ${1:name}Repository get _repository => ref.watch(${2:value}RepositoryProvider);",
      "  ",
      "  @override",
      "  FutureOr<List<${1:name}Entity>> build() async {",
      "    return _fetchData();",
      "  }",
      "",
      "  // 内部私有方法，只返回数据，不操作 state",
      "  Future<List<${1:name}Entity>> _fetchData() async {",
      "    final result = await _repository.${3:func}();",
      "    return result?.data ?? [];",
      "  }",
      "",
      "  /// ${3:func}",
      "  Future<void> ${3:func}() async {",
      "    state = AsyncValue.loading();",
      "    state = await AsyncValue.guard(_fetchData);",
      "  }",
      "}",
      "",
    ],
    "description": "生成 application/notifiers 里面的文件"
  },
}